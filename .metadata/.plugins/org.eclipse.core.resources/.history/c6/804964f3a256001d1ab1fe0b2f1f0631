package com.practice.designpatterns.singleton;

public class ThreadSafeSingleton {
	private static Singleton instance;

	private ThreadSafeSingleton() {
	}

	public static Singleton getInstanceEagerInitialized() {
		return instance;
	}

	public static Singleton getInstanceLazyInitialized() {
		if (instance == null) {
			instance = new Singleton();
		}
		return instance;
	}

	public static synchronized Singleton getInstanceThreadSafe() {
		if (instance == null) {
			instance = new Singleton();
		}
		return instance;
	}

	public static Singleton getInstanceUsingDoubleLocking() {
		if (instance == null) {
			synchronized (Singleton.class) {
				if (instance == null) {
					instance = new Singleton();
				}
			}
		}
		return instance;
	}
}
